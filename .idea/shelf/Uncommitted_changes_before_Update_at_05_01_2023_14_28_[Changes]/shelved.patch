Index: models/clients.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models\r\n\r\nimport (\r\n\tengine \"github.com/JoanGTSQ/api\"\r\n\t\"github.com/jinzhu/gorm\"\r\n\t_ \"github.com/lib/pq\"\r\n\tuuid \"github.com/satori/go.uuid\"\r\n)\r\n\r\n\r\n\r\ntype UserMessage struct {\r\n\tSenderID uint      `gorm:\"not null\"`\r\n\tType     string    `gorm:\"not null\"`\r\n\tSender   User    `gorm:\"foreignkey:SenderID\"`\r\n\tMessage  string    `gorm:\"not null\"`\r\n\tReceiver uuid.UUID `gorm:\"not null\"`\r\n}\r\n\r\n\r\n\r\ntype MessageDB interface {\r\n}\r\n\r\nvar gormMessage postGorm\r\n\r\ntype MessageService interface {\r\n\tMessageDB\r\n}\r\n\r\nvar _ MessageDB = &messageGorm{}\r\n\r\ntype messageGorm struct {\r\n\tdb *gorm.DB\r\n}\r\n\r\nfunc NewMessageService(gD *gorm.DB) MessageService {\r\n\tug, err := newgormMessage(gD)\r\n\tif err != nil {\r\n\t\treturn nil\r\n\t}\r\n\treturn &messageService{\r\n\t\tMessageDB: ug,\r\n\t}\r\n}\r\n\r\ntype messageService struct {\r\n\tMessageDB\r\n}\r\n\r\nfunc newgormMessage(db *gorm.DB) (*postGorm, error) {\r\n\tgormMessage.db = db\r\n\treturn &postGorm{\r\n\t\tdb: db,\r\n\t}, nil\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunc (message UserMessage) RegisterMessage() {\r\n\terr := gormMessage.db.Create(&message).Error\r\n\tif err != nil {\r\n\t\tengine.Error.Fatalln(err)\r\n\t}\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models/clients.go b/models/clients.go
--- a/models/clients.go	(revision 945af2d159517c5934e4fc21483ba81ea1f0cab8)
+++ b/models/clients.go	(date 1672567779888)
@@ -7,18 +7,14 @@
 	uuid "github.com/satori/go.uuid"
 )
 
-
-
 type UserMessage struct {
 	SenderID uint      `gorm:"not null"`
 	Type     string    `gorm:"not null"`
-	Sender   User    `gorm:"foreignkey:SenderID"`
+	Sender   User      `gorm:"foreignkey:SenderID"`
 	Message  string    `gorm:"not null"`
 	Receiver uuid.UUID `gorm:"not null"`
 }
 
-
-
 type MessageDB interface {
 }
 
@@ -35,7 +31,7 @@
 }
 
 func NewMessageService(gD *gorm.DB) MessageService {
-	ug, err := newgormMessage(gD)
+	ug, err := newGormMessage(gD)
 	if err != nil {
 		return nil
 	}
@@ -48,23 +44,16 @@
 	MessageDB
 }
 
-func newgormMessage(db *gorm.DB) (*postGorm, error) {
+func newGormMessage(db *gorm.DB) (*postGorm, error) {
 	gormMessage.db = db
 	return &postGorm{
 		db: db,
 	}, nil
 }
 
-
-
-
-
-
-
 func (message UserMessage) RegisterMessage() {
 	err := gormMessage.db.Create(&message).Error
 	if err != nil {
 		engine.Error.Fatalln(err)
 	}
 }
-
Index: helper/engine.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package helper\r\n\r\nimport (\r\n\t\"bufio\"\r\n\t\"fmt\"\r\n\t\"os\"\r\n\r\n\tengine \"github.com/JoanGTSQ/api\"\r\n\t\"github.com/gin-gonic/gin\"\r\n\t\"neft.web/client\"\r\n\t\"neft.web/middlewares\"\r\n\t\"neft.web/models\"\r\n)\r\n\r\n// InitDB start a connection with the database, return error if can't connect\r\nfunc InitDB(debugdb bool) error {\r\n\t// Create connection with DB\r\n\tengine.Debug.Println(\"Creating connection with DB\")\r\n\tvar err error\r\n\tclient.Services, err = models.NewServices(fmt.Sprintf(\r\n\t\t\"host=%s port=%d user=%s password=%s dbname=%s sslmode=%s\",\r\n\t\tdatabase.URL,\r\n\t\t5432,\r\n\t\tdatabase.User,\r\n\t\tdatabase.Password,\r\n\t\tdatabase.Name,\r\n\t\tdatabase.SslMode),\r\n\t\tdebugdb)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\treturn nil\r\n}\r\n\r\n// InitRouter Generate a router with directions and middlewares\r\nfunc InitRouter() *gin.Engine {\r\n\tengine.Debug.Println(\"Creating gin router\")\r\n\tcontrollersR := client.Controllers{\r\n\t\tUsers:   client.NewUsers(client.Services.User),\r\n\t\tPosts:   client.NewPosts(client.Services.Post),\r\n\t\tDevices: client.NewDevices(client.Services.Device),\r\n\t}\r\n\tclient.UsersAuth = controllersR.Users\r\n\trouter := gin.New()\r\n\trouter.Use(middlewares.CORSMiddleware())\r\n\tapi := router.Group(\"/v1\")\r\n\t{\r\n\r\n\r\n\t\tsecured := api.Group(\"/secured\").Use(middlewares.RequireAuth())\r\n\t\t{\r\n\t\t\t// USER\r\n\r\n\t\t\tsecured.GET(\"/users\", controllersR.Users.RetrieveAllUsers)\r\n\r\n\r\n\t\t\tsecured.PUT(\"/post\", controllersR.Posts.CreatePost)\r\n\t\t\tsecured.DELETE(\"/post\", controllersR.Posts.DeletePost)\r\n\t\t\tsecured.PATCH(\"/post\", controllersR.Posts.UpdatePost)\r\n\t\t\tsecured.GET(\"/posts\", controllersR.Posts.RetrieveAllPost)\r\n\t\t\t// secured.GET(\"/post/:id\", controllersR.Posts.GetPost)\r\n\t\t\tsecured.GET(\"/post/like/:id\", controllersR.Posts.Like)\r\n\t\t\tsecured.DELETE(\"/post/like/:id\", controllersR.Posts.Unlike)\r\n\t\t\tsecured.PUT(\"/post/comment/:id\", controllersR.Posts.Comment)\r\n\t\t\tsecured.DELETE(\"/post/comment/:id\", controllersR.Posts.Uncomment)\r\n\t\t}\r\n\t}\r\n\r\n\tbeta := router.Group(\"/beta\")\r\n\t{\r\n\t\tbeta.GET(\"/websocket\", ControlWebsocket)\r\n\t}\r\n\treturn router\r\n}\r\n\r\n// ReadInput read in every moment the console and change maitenance and debug mode\r\nfunc ReadInput(debug bool) {\r\n\tinput := bufio.NewScanner(os.Stdin)\r\n\tfor input.Scan() {\r\n\t\tswitch input.Text() {\r\n\t\tcase \"maitenance\":\r\n\t\t\tmiddlewares.Maitenance = !middlewares.Maitenance\r\n\t\t\tengine.Info.Println(\"maitenance\", middlewares.Maitenance)\r\n\t\tcase \"debug\":\r\n\t\t\tdebug = !debug\r\n\t\t\tengine.EnableDebug(debug)\r\n\t\t\tengine.Info.Println(\"debug mode\", debug)\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/helper/engine.go b/helper/engine.go
--- a/helper/engine.go	(revision 945af2d159517c5934e4fc21483ba81ea1f0cab8)
+++ b/helper/engine.go	(date 1672567156995)
@@ -46,14 +46,12 @@
 	api := router.Group("/v1")
 	{
 
-
 		secured := api.Group("/secured").Use(middlewares.RequireAuth())
 		{
 			// USER
 
 			secured.GET("/users", controllersR.Users.RetrieveAllUsers)
 
-
 			secured.PUT("/post", controllersR.Posts.CreatePost)
 			secured.DELETE("/post", controllersR.Posts.DeletePost)
 			secured.PATCH("/post", controllersR.Posts.UpdatePost)
@@ -73,14 +71,14 @@
 	return router
 }
 
-// ReadInput read in every moment the console and change maitenance and debug mode
+// ReadInput read in every moment the console and change maintenance and debug mode
 func ReadInput(debug bool) {
 	input := bufio.NewScanner(os.Stdin)
 	for input.Scan() {
 		switch input.Text() {
 		case "maitenance":
 			middlewares.Maitenance = !middlewares.Maitenance
-			engine.Info.Println("maitenance", middlewares.Maitenance)
+			engine.Info.Println("maintenance", middlewares.Maitenance)
 		case "debug":
 			debug = !debug
 			engine.EnableDebug(debug)
Index: controller/user.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller\r\n\r\nimport (\r\n\t\"fmt\"\r\n\tengine \"github.com/JoanGTSQ/api\"\r\n\t\"neft.web/models\"\r\n)\r\n\r\nfunc (client *Client) UpdateUser() {\r\n\r\n\tvar newUser models.User\r\n\r\n\tnewUser, err := client.GetUserFromMap()\r\n\tif err != nil {\r\n\t\tengine.Warning.Println(err)\r\n\t\tclient.LastMessage.Data = err\r\n\t\tclient.SendMessage()\r\n\t\treturn\r\n\t}\r\n\r\n\tif client.User.ID != newUser.ID {\r\n\t\tengine.Warning.Println(engine.ERR_NOT_SAME_USER, newUser.ID, client.User.ID)\r\n\t\tclient.LastMessage.Data = engine.ERR_NOT_SAME_USER.Error()\r\n\t\tclient.SendMessage()\r\n\t\treturn\r\n\t}\r\n\t// Try to update the user\r\n\tif err := newUser.Update(); err != nil {\r\n\t\tclient.LastMessage.Data = err\r\n\t\tclient.SendMessage()\r\n\t\tengine.Warning.Println(err)\r\n\t\treturn\r\n\t}\r\n\tclient.User = newUser\r\n\tclient.LastMessage.Data = \"User updated successfully\"\r\n\tclient.SendMessage()\r\n}\r\n\r\n// DeleteUser DELETE /user\r\n// Obtain user data, search by ID and delete it, return code http.StatusOK\r\nfunc (client *Client) DeleteUser() {\r\n\tvar user models.User\r\n\r\n\tuser, err := client.GetUserFromMap()\r\n\tif err != nil {\r\n\t\tengine.Warning.Println(err)\r\n\t\tclient.LastMessage.Data = err\r\n\t\tclient.SendMessage()\r\n\t\treturn\r\n\t}\r\n\r\n\tif user.ID != client.User.ID {\r\n\t\tengine.Warning.Println(\"Someone is trying to delete a user without rights\")\r\n\t\tclient.LastMessage.Data = \"ERR: you are trying to delete a user without rights\"\r\n\t\tclient.SendMessage()\r\n\t\treturn\r\n\t}\r\n\t// Try to delete the user\r\n\tif err := user.Delete(); err != nil {\r\n\t\tengine.Warning.Println(err)\r\n\t\tclient.LastMessage.Data = err\r\n\t\tclient.SendMessage()\r\n\t\treturn\r\n\t}\r\n\tclient.User = models.User{}\r\n\r\n\t// Close connection with status http.StatusOK (resource deleted)\r\n\tclient.LastMessage.Data = \"user deleted\"\r\n\tclient.SendMessage()\r\n}\r\n\r\n// RetrieveUser GET /user\r\n// Obtain the remember_hash from the JWT token and return it in JSON\r\nfunc (client *Client) RetrieveUser() {\r\n\r\n\tuser, err := client.GetUserFromMap()\r\n\tif err != nil {\r\n\t\tengine.Warning.Println(err)\r\n\t\tclient.LastMessage.Data = err\r\n\t\tclient.SendMessage()\r\n\t\treturn\r\n\t}\r\n\r\n\terr = user.ByID()\r\n\tif err != nil {\r\n\t\tengine.Warning.Println(err)\r\n\t\tclient.LastMessage.Data = err\r\n\t\tclient.SendMessage()\r\n\t\treturn\r\n\t}\r\n\r\n\tclient.LastMessage.Data = user\r\n\tclient.SendMessage()\r\n}\r\n\r\nfunc (client *Client) SignUp() {\r\n\r\n\tuser, err := client.GetUserFromMap()\r\n\tif err != nil {\r\n\t\tengine.Warning.Println(err)\r\n\t\tclient.LastMessage.Data = err\r\n\t\tclient.SendMessage()\r\n\t\treturn\r\n\t}\r\n\t// Create user with the data received\r\n\tif err := user.Create(); err != nil {\r\n\t\tengine.Warning.Println(err)\r\n\t\tclient.LastMessage.Data = err\r\n\t\tclient.SendMessage()\r\n\t\treturn\r\n\t}\r\n\r\n\tclient.User = user\r\n\r\n\tclient.LastMessage.Data = \"User created successfully\"\r\n\tclient.SendMessage()\r\n}\r\n\r\nfunc (client *Client) InitUserReset() {\r\n\r\n\tuser, err := client.GetUserFromMap()\r\n\tif err != nil {\r\n\t\tengine.Warning.Println(err)\r\n\t\tclient.LastMessage.Data = err\r\n\t\tclient.SendMessage()\r\n\t\treturn\r\n\t}\r\n\r\n\t// Initiate reset with the data received\r\n\ttoken, err := user.InitiateReset()\r\n\tif err != nil {\r\n\t\tengine.Warning.Println(err)\r\n\t\tclient.LastMessage.Data = err\r\n\t\tclient.SendMessage()\r\n\t\treturn\r\n\t}\r\n\r\n\tclient.LastMessage.Data = token\r\n\tclient.SendMessage()\r\n}\r\n\r\ntype CompletePasswdReset struct {\r\n\tToken    string\r\n\tPassword string\r\n}\r\n\r\nfunc (client *Client) CompleteReset() {\r\n\r\n\tuser, err := client.GetUserFromMap()\r\n\tif err != nil {\r\n\t\tengine.Warning.Println(err)\r\n\t\tclient.LastMessage.Data = err\r\n\t\tclient.SendMessage()\r\n\t\treturn\r\n\t}\r\n\tform := &CompletePasswdReset{}\r\n\terr = client.GetInterfaceFromMap(\"token\", form)\r\n\tif err != nil {\r\n\t\tengine.Debug.Println(err)\r\n\t\tclient.LastMessage.Data = \"Error: \" + err.Error()\r\n\t\tclient.SendMessage()\r\n\t\treturn\r\n\t}\r\n\r\n\terr = user.CompleteReset(form.Token, user.Password)\r\n\tif err != nil {\r\n\t\tengine.Debug.Println(err)\r\n\t\tclient.LastMessage.Data = \"Error: \" + err.Error()\r\n\t\tclient.SendMessage()\r\n\t\treturn\r\n\t}\r\n\r\n\tclient.LastMessage.Data = \"User password resetted successfully\"\r\n\tclient.SendMessage()\r\n\r\n}\r\n\r\nfunc (client *Client) FollowUser() {\r\n\r\n\tuserToFollow := &models.User{}\r\n\r\n\terr := client.GetInterfaceFromMap(\"user_to_follow\", userToFollow)\r\n\tif err != nil {\r\n\t\tengine.Warning.Println(err)\r\n\t\tclient.LastMessage.Data = err\r\n\t\tclient.SendMessage()\r\n\t\treturn\r\n\t}\r\n\tif err = client.User.Follow(userToFollow.ID); err != nil {\r\n\t\tengine.Warning.Println(err)\r\n\t\tclient.LastMessage.Data = err\r\n\t\tclient.SendMessage()\r\n\t\treturn\r\n\t}\r\n\tclient.LastMessage.Data = fmt.Sprintf(\"User ID %s followed successfully\", userToFollow.ID)\r\n\tclient.SendMessage()\r\n}\r\n\r\nfunc (client *Client) UnfollowUser() {\r\n\r\n\tuserToUnfollow := &models.User{}\r\n\terr := client.GetInterfaceFromMap(\"user_to_follow\", userToUnfollow)\r\n\tif err != nil {\r\n\t\tengine.Warning.Println(err)\r\n\t\tclient.LastMessage.Data = err\r\n\t\tclient.SendMessage()\r\n\t\treturn\r\n\t}\r\n\tif err = client.User.Unfollow(userToUnfollow.ID); err != nil {\r\n\t\tengine.Warning.Println(err)\r\n\t\tclient.LastMessage.Data = err\r\n\t\tclient.SendMessage()\r\n\t\treturn\r\n\t}\r\n\tclient.LastMessage.Data = fmt.Sprintf(\"User ID %s unfollowed successfully\", userToUnfollow.ID)\r\n\tclient.SendMessage()\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/controller/user.go b/controller/user.go
--- a/controller/user.go	(revision 945af2d159517c5934e4fc21483ba81ea1f0cab8)
+++ b/controller/user.go	(date 1672567735717)
@@ -6,6 +6,7 @@
 	"neft.web/models"
 )
 
+// UpdateUser Get the user from the json request, compare ID and update it
 func (client *Client) UpdateUser() {
 
 	var newUser models.User
@@ -36,8 +37,7 @@
 	client.SendMessage()
 }
 
-// DeleteUser DELETE /user
-// Obtain user data, search by ID and delete it, return code http.StatusOK
+// DeleteUser Obtain user data, search by ID and delete it, return code http.StatusOK
 func (client *Client) DeleteUser() {
 	var user models.User
 
@@ -69,8 +69,7 @@
 	client.SendMessage()
 }
 
-// RetrieveUser GET /user
-// Obtain the remember_hash from the JWT token and return it in JSON
+// RetrieveUser Obtain the user from the json request and search it by ID
 func (client *Client) RetrieveUser() {
 
 	user, err := client.GetUserFromMap()
@@ -93,8 +92,8 @@
 	client.SendMessage()
 }
 
+// SignUp Register a new user
 func (client *Client) SignUp() {
-
 	user, err := client.GetUserFromMap()
 	if err != nil {
 		engine.Warning.Println(err)
@@ -116,6 +115,7 @@
 	client.SendMessage()
 }
 
+// InitUserReset Initiate the process of restore a password
 func (client *Client) InitUserReset() {
 
 	user, err := client.GetUserFromMap()
@@ -139,13 +139,14 @@
 	client.SendMessage()
 }
 
+// CompletePasswdReset This struct is used to unmarshall the token and password to complete the reset
 type CompletePasswdReset struct {
 	Token    string
 	Password string
 }
 
+// CompleteReset Use this controller to complete the password reset with token
 func (client *Client) CompleteReset() {
-
 	user, err := client.GetUserFromMap()
 	if err != nil {
 		engine.Warning.Println(err)
@@ -170,11 +171,12 @@
 		return
 	}
 
-	client.LastMessage.Data = "User password resetted successfully"
+	client.LastMessage.Data = "User password reset successfully"
 	client.SendMessage()
 
 }
 
+// FollowUser Use this controller to follow between users
 func (client *Client) FollowUser() {
 
 	userToFollow := &models.User{}
@@ -192,10 +194,11 @@
 		client.SendMessage()
 		return
 	}
-	client.LastMessage.Data = fmt.Sprintf("User ID %s followed successfully", userToFollow.ID)
+	client.LastMessage.Data = fmt.Sprintf("User ID %d followed successfully", userToFollow.ID)
 	client.SendMessage()
 }
 
+// UnfollowUser Use this controller to unfollow between users
 func (client *Client) UnfollowUser() {
 
 	userToUnfollow := &models.User{}
@@ -212,6 +215,6 @@
 		client.SendMessage()
 		return
 	}
-	client.LastMessage.Data = fmt.Sprintf("User ID %s unfollowed successfully", userToUnfollow.ID)
+	client.LastMessage.Data = fmt.Sprintf("User ID %d unfollowed successfully", userToUnfollow.ID)
 	client.SendMessage()
 }
Index: models/categories.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models\r\n\r\nimport (\r\n\tengine \"github.com/JoanGTSQ/api\"\r\n\t\"github.com/jinzhu/gorm\"\r\n\t_ \"github.com/lib/pq\"\r\n\t\"regexp\"\r\n)\r\n\r\ntype CategoryDB interface {\r\n\tByID(id uint) (*Category, error)\r\n\tAllCategorys(pagination Pagination) ([]*Category, error)\r\n\r\n\tCreate(category *Category) error\r\n\tUpdate(category *Category) error\r\n\tDelete(category *Category) error\r\n\tCount() (int, error)\r\n}\r\n\r\ntype CategoryService interface {\r\n\tCategoryDB\r\n}\r\n\r\nfunc newCategoryGorm(db *gorm.DB) (*categoryGorm, error) {\r\n\treturn &categoryGorm{\r\n\t\tdb: db,\r\n\t}, nil\r\n}\r\nfunc NewCategoryService(gD *gorm.DB) CategoryService {\r\n\tug, err := newCategoryGorm(gD)\r\n\tif err != nil {\r\n\t\treturn nil\r\n\t}\r\n\thmac := engine.NewHMAC(hmacScretKey)\r\n\tuv := newCategoryValidator(ug, hmac)\r\n\treturn &categoryService{\r\n\t\tCategoryDB: uv,\r\n\t}\r\n}\r\n\r\ntype categoryService struct {\r\n\tCategoryDB\r\n}\r\ntype categoryValidator struct {\r\n\tCategoryDB\r\n\thmac       engine.HMAC\r\n\temailRegex *regexp.Regexp\r\n}\r\n\r\nfunc newCategoryValidator(udb CategoryDB, hmac engine.HMAC) *categoryValidator {\r\n\treturn &categoryValidator{\r\n\t\tCategoryDB: udb,\r\n\t\thmac:       hmac,\r\n\t}\r\n}\r\n\r\nvar _ CategoryDB = &categoryGorm{}\r\n\r\ntype categoryGorm struct {\r\n\tdb *gorm.DB\r\n}\r\n\r\nfunc (tg *categoryGorm) Create(category *Category) error {\r\n\terr := tg.db.Create(category).Error\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\treturn nil\r\n}\r\n\r\nfunc (tg *categoryGorm) Delete(category *Category) error {\r\n\treturn tg.db.Delete(&category).Error\r\n}\r\n\r\nfunc (tg *categoryGorm) Update(category *Category) error {\r\n\treturn tg.db.Save(category).Error\r\n}\r\n\r\n// SEARCH BY ID\r\nfunc (ug *categoryGorm) ByID(id uint) (*Category, error) {\r\n\tvar category Category\r\n\terr := ug.db.Where(\"id = ?\", id).First(&category).Error\r\n\treturn &category, err\r\n}\r\n\r\nfunc (ug *categoryGorm) AllCategorys(pagination Pagination) ([]*Category, error) {\r\n\tvar category []*Category\r\n\toffset := (pagination.Page - 1) * pagination.Limit\r\n\terr := ug.db.Offset(offset).Limit(pagination.Limit).Order(pagination.Sort).Find(&category).Error\r\n\treturn category, err\r\n}\r\n\r\nfunc (tg *categoryGorm) Count() (int, error) {\r\n\tvar categorys int64\r\n\terr := tg.db.Table(\"categorys\").Count(&categorys).Error\r\n\treturn int(categorys), err\r\n}\r\n\r\ntype Category struct {\r\n\tNeftModel\r\n\tName        string `json:\"name\"`\r\n\tDescription string `json:\"description\"`\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/models/categories.go b/models/categories.go
--- a/models/categories.go	(revision 945af2d159517c5934e4fc21483ba81ea1f0cab8)
+++ b/models/categories.go	(date 1672567735511)
@@ -9,7 +9,7 @@
 
 type CategoryDB interface {
 	ByID(id uint) (*Category, error)
-	AllCategorys(pagination Pagination) ([]*Category, error)
+	AllCategories(pagination Pagination) ([]*Category, error)
 
 	Create(category *Category) error
 	Update(category *Category) error
@@ -83,7 +83,7 @@
 	return &category, err
 }
 
-func (ug *categoryGorm) AllCategorys(pagination Pagination) ([]*Category, error) {
+func (ug *categoryGorm) AllCategories(pagination Pagination) ([]*Category, error) {
 	var category []*Category
 	offset := (pagination.Page - 1) * pagination.Limit
 	err := ug.db.Offset(offset).Limit(pagination.Limit).Order(pagination.Sort).Find(&category).Error
@@ -91,9 +91,9 @@
 }
 
 func (tg *categoryGorm) Count() (int, error) {
-	var categorys int64
-	err := tg.db.Table("categorys").Count(&categorys).Error
-	return int(categorys), err
+	var categories int64
+	err := tg.db.Table("category").Count(&categories).Error
+	return int(categories), err
 }
 
 type Category struct {
Index: test/auth_test.go
===================================================================
diff --git a/test/auth_test.go b/test/auth_test.go
deleted file mode 100644
--- a/test/auth_test.go	(revision 945af2d159517c5934e4fc21483ba81ea1f0cab8)
+++ /dev/null	(revision 945af2d159517c5934e4fc21483ba81ea1f0cab8)
@@ -1,93 +0,0 @@
-package test
-
-import (
-	"bytes"
-	"encoding/json"
-	"fmt"
-	"io/ioutil"
-	"net/http"
-	"net/http/httptest"
-	"testing"
-
-	helperS "github.com/JoanGTSQ/api"
-	"github.com/gin-gonic/gin"
-	"github.com/stretchr/testify/assert"
-	"neft.web/controllers"
-	"neft.web/helper"
-	"neft.web/models"
-)
-
-var Token string
-var Email = "hola@hdola.hola"
-
-func SetUpRouter() *gin.Engine {
-	helperS.InitLog(false, "text.txt", "0.0.1")
-	gin.SetMode(gin.ReleaseMode)
-
-	if err := helper.InitDB("require", false); err != nil {
-		helperS.Error.Fatalln("Can not connect to DB: ", err)
-	}
-	// defer controllers.Services.Close()
-
-	// Auto generate new tables or modifications in every start | Use DestructiveReset() to delete all data
-
-	if err := controllers.Services.AutoMigrate(); err != nil {
-		helperS.Error.Fatalln("Can not AutoMigrate the database")
-	}
-
-	// Retrieve controllers struct
-	helperS.Debug.Println("Creating all services handlers")
-
-	// Generate Router
-	helperS.Debug.Println("Creating gin router")
-	r := helper.InitRouter()
-	return r
-}
-
-type answer struct {
-	Data    map[string]interface{}
-	Message string
-}
-
-func TestAuthRegister(t *testing.T) {
-
-	r := SetUpRouter()
-	user := models.User{
-		UserName: "JoanGTSQ",
-		FullName: "nope",
-		Email:    Email,
-		Password: "PuroVici!1",
-	}
-	jsonValue, _ := json.Marshal(user)
-	req, _ := http.NewRequest("PUT", "/v1/auth", bytes.NewBuffer(jsonValue))
-
-	w := httptest.NewRecorder()
-	r.ServeHTTP(w, req)
-
-	assert.Equal(t, http.StatusOK, w.Code)
-}
-
-func TestAuthLogin(t *testing.T) {
-
-	r := SetUpRouter()
-	user := models.User{
-		Email:    Email,
-		Password: "PuroVici!1",
-	}
-	jsonValue, _ := json.Marshal(user)
-	req, _ := http.NewRequest("POST", "/v1/auth", bytes.NewBuffer(jsonValue))
-
-	w := httptest.NewRecorder()
-	r.ServeHTTP(w, req)
-
-	responseData, _ := ioutil.ReadAll(w.Body)
-
-	var x answer
-
-	err := json.Unmarshal([]byte(responseData), &x)
-	if err != nil {
-		return
-	}
-	Token = fmt.Sprintf("%v", x.Data["token"])
-	assert.Equal(t, http.StatusOK, w.Code)
-}
Index: test/user_test.go
===================================================================
diff --git a/test/user_test.go b/test/user_test.go
deleted file mode 100644
--- a/test/user_test.go	(revision 945af2d159517c5934e4fc21483ba81ea1f0cab8)
+++ /dev/null	(revision 945af2d159517c5934e4fc21483ba81ea1f0cab8)
@@ -1,20 +0,0 @@
-package test
-
-import (
-	"github.com/stretchr/testify/assert"
-	"net/http"
-	"net/http/httptest"
-	"testing"
-)
-
-func TestMainUser(t *testing.T) {
-
-	r := SetUpRouter()
-	req, _ := http.NewRequest("GET", "/v1/secured/whoami", nil)
-	req.Header.Set("neftAuth", Token)
-	w := httptest.NewRecorder()
-	r.ServeHTTP(w, req)
-
-	// responseData, _ := ioutil.ReadAll(w.Body)
-	assert.Equal(t, http.StatusOK, w.Code)
-}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"ALL\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"b55ab9d4-7f18-4127-beb2-0b8c27382938\" name=\"Changes\" comment=\"neeeews\">\r\n      <change afterPath=\"$PROJECT_DIR$/controller/post.go\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/SDK.ver\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/SDK.ver\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/controller/user.go\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/controller/user.go\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/helper/motor.go\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/helper/motor.go\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/main.go\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.go\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Go File\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"GOROOT\" url=\"file://C:/Program Files/Go\" />\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"NFT-58-comprobar-usuario\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2Hgb7ek2TPlypDsdJzEaFbmLNCi\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;DefaultGoTemplateProperty&quot;: &quot;Go File&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.go.format.on.save.advertiser.fired&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.go.formatter.settings.were.checked&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.go.migrated.go.modules.settings&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.go.modules.go.list.on.any.changes.was.set&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.go.watchers.conflict.with.on.save.actions.check.performed&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;go.import.settings.migrated&quot;: &quot;true&quot;,\r\n    &quot;go.sdk.automatically.set&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/joang&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\develop\\golang\\api_server\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Go Build.go build neft.web\">\r\n    <configuration name=\"go build neft.web\" type=\"GoApplicationRunConfiguration\" factoryName=\"Go Application\" nameIsGenerated=\"true\">\r\n      <module name=\"api_server\" />\r\n      <working_directory value=\"$PROJECT_DIR$\" />\r\n      <parameters value=\"-debug=true -route=log/log.txt -debugDB=false\" />\r\n      <kind value=\"PACKAGE\" />\r\n      <package value=\"neft.web\" />\r\n      <directory value=\"$PROJECT_DIR$\" />\r\n      <filePath value=\"$PROJECT_DIR$\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"go test test\" type=\"GoTestRunConfiguration\" factoryName=\"Go Test\" singleton=\"false\" nameIsGenerated=\"true\">\r\n      <module name=\"api_server\" />\r\n      <working_directory value=\"$PROJECT_DIR$\" />\r\n      <kind value=\"DIRECTORY\" />\r\n      <directory value=\"$PROJECT_DIR$/test\" />\r\n      <filePath value=\"$PROJECT_DIR$\" />\r\n      <framework value=\"gotest\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"scratch | LOGIN\" type=\"HttpClient.HttpRequestRunConfigurationType\" factoryName=\"HTTP Request\" temporary=\"true\" nameIsGenerated=\"true\" path=\"$APPLICATION_CONFIG_DIR$/scratches/scratch.http\" index=\"3\" requestIdentifier=\"LOGIN\" runType=\"Run single request\">\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Go Build.go build neft.web\" />\r\n      <item itemvalue=\"Go Test.go test test\" />\r\n      <item itemvalue=\"HTTP Request.scratch | LOGIN\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"HTTP Request.scratch | LOGIN\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"origin/NFT-58-comprobar-usuario\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"update uncomment unlike\" />\r\n    <MESSAGE value=\"preload user\" />\r\n    <MESSAGE value=\"neeeews\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"neeeews\" />\r\n  </component>\r\n  <component name=\"VgoProject\">\r\n    <settings-migrated>true</settings-migrated>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 945af2d159517c5934e4fc21483ba81ea1f0cab8)
+++ b/.idea/workspace.xml	(date 1672925319181)
@@ -4,13 +4,17 @@
     <option name="autoReloadType" value="ALL" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="b55ab9d4-7f18-4127-beb2-0b8c27382938" name="Changes" comment="neeeews">
-      <change afterPath="$PROJECT_DIR$/controller/post.go" afterDir="false" />
+    <list default="true" id="b55ab9d4-7f18-4127-beb2-0b8c27382938" name="Changes" comment="little fix">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/SDK.ver" beforeDir="false" afterPath="$PROJECT_DIR$/SDK.ver" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/controller/user.go" beforeDir="false" afterPath="$PROJECT_DIR$/controller/user.go" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/helper/motor.go" beforeDir="false" afterPath="$PROJECT_DIR$/helper/motor.go" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/main.go" beforeDir="false" afterPath="$PROJECT_DIR$/main.go" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/go.mod" beforeDir="false" afterPath="$PROJECT_DIR$/go.mod" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/go.sum" beforeDir="false" afterPath="$PROJECT_DIR$/go.sum" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/helper/engine.go" beforeDir="false" afterPath="$PROJECT_DIR$/helper/engine.go" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/models/categories.go" beforeDir="false" afterPath="$PROJECT_DIR$/models/categories.go" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/models/clients.go" beforeDir="false" afterPath="$PROJECT_DIR$/models/clients.go" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/test/auth_test.go" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/test/user_test.go" beforeDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -57,6 +61,7 @@
     &quot;go.import.settings.migrated&quot;: &quot;true&quot;,
     &quot;go.sdk.automatically.set&quot;: &quot;true&quot;,
     &quot;last_opened_file_path&quot;: &quot;C:/Users/joang&quot;,
+    &quot;run.code.analysis.last.selected.profile&quot;: &quot;pProject Default&quot;,
     &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;
   }
 }</component>
@@ -130,7 +135,8 @@
     <MESSAGE value="update uncomment unlike" />
     <MESSAGE value="preload user" />
     <MESSAGE value="neeeews" />
-    <option name="LAST_COMMIT_MESSAGE" value="neeeews" />
+    <MESSAGE value="little fix" />
+    <option name="LAST_COMMIT_MESSAGE" value="little fix" />
   </component>
   <component name="VgoProject">
     <settings-migrated>true</settings-migrated>
Index: go.mod
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module neft.web\r\n\r\ngo 1.17\r\n\r\nrequire (\r\n\tgithub.com/JoanGTSQ/api v1.0.3\r\n\tgithub.com/google/uuid v1.3.0\r\n\tgithub.com/jinzhu/gorm v1.9.16\r\n\tgithub.com/lib/pq v1.1.1\r\n\tgithub.com/shopspring/decimal v1.3.1\r\n\tgithub.com/stretchr/testify v1.8.0\r\n\tgolang.org/x/crypto v0.0.0-20220214200702-86341886e292\r\n)\r\n\r\nrequire (\r\n\tgithub.com/davecgh/go-spew v1.1.1 // indirect\r\n\tgithub.com/fatih/color v1.13.0 // indirect\r\n\tgithub.com/gorilla/websocket v1.5.0 // indirect\r\n\tgithub.com/mitchellh/mapstructure v1.5.0 // indirect\r\n\tgithub.com/pmezard/go-difflib v1.0.0 // indirect\r\n\tgithub.com/satori/go.uuid v1.2.0 // indirect\r\n\tgopkg.in/yaml.v3 v3.0.1 // indirect\r\n)\r\n\r\nrequire (\r\n\tgithub.com/gin-contrib/sse v0.1.0 // indirect\r\n\tgithub.com/gin-gonic/gin v1.8.1\r\n\tgithub.com/go-playground/locales v0.14.0 // indirect\r\n\tgithub.com/go-playground/universal-translator v0.18.0 // indirect\r\n\tgithub.com/go-playground/validator/v10 v10.10.0 // indirect\r\n\tgithub.com/goccy/go-json v0.9.7 // indirect\r\n\tgithub.com/golang-jwt/jwt/v4 v4.4.2\r\n\tgithub.com/jinzhu/inflection v1.0.0 // indirect\r\n\tgithub.com/json-iterator/go v1.1.12 // indirect\r\n\tgithub.com/leodido/go-urn v1.2.1 // indirect\r\n\tgithub.com/mattn/go-colorable v0.1.12 // indirect\r\n\tgithub.com/mattn/go-isatty v0.0.14 // indirect\r\n\tgithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421 // indirect\r\n\tgithub.com/modern-go/reflect2 v1.0.2 // indirect\r\n\tgithub.com/pelletier/go-toml/v2 v2.0.1 // indirect\r\n\tgithub.com/ugorji/go/codec v1.2.7 // indirect\r\n\tgolang.org/x/net v0.0.0-20220722155237-a158d28d115b // indirect\r\n\tgolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f // indirect\r\n\tgolang.org/x/text v0.3.7 // indirect\r\n\tgoogle.golang.org/protobuf v1.28.0 // indirect\r\n\tgopkg.in/yaml.v2 v2.4.0 // indirect\r\n)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/go.mod b/go.mod
--- a/go.mod	(revision 945af2d159517c5934e4fc21483ba81ea1f0cab8)
+++ b/go.mod	(date 1672567875175)
@@ -19,6 +19,9 @@
 	github.com/mitchellh/mapstructure v1.5.0 // indirect
 	github.com/pmezard/go-difflib v1.0.0 // indirect
 	github.com/satori/go.uuid v1.2.0 // indirect
+	github.com/yuin/goldmark v1.4.13 // indirect
+	golang.org/x/mod v0.7.0 // indirect
+	golang.org/x/tools v0.4.0 // indirect
 	gopkg.in/yaml.v3 v3.0.1 // indirect
 )
 
@@ -39,9 +42,9 @@
 	github.com/modern-go/reflect2 v1.0.2 // indirect
 	github.com/pelletier/go-toml/v2 v2.0.1 // indirect
 	github.com/ugorji/go/codec v1.2.7 // indirect
-	golang.org/x/net v0.0.0-20220722155237-a158d28d115b // indirect
-	golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f // indirect
-	golang.org/x/text v0.3.7 // indirect
+	golang.org/x/net v0.3.0 // indirect
+	golang.org/x/sys v0.3.0 // indirect
+	golang.org/x/text v0.5.0 // indirect
 	google.golang.org/protobuf v1.28.0 // indirect
 	gopkg.in/yaml.v2 v2.4.0 // indirect
 )
Index: go.sum
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>github.com/JoanGTSQ/api v1.0.3 h1:keo6I+98bdwINIfIYkF+s3ryZ+djPOfqG2+CJCrwAkw=\r\ngithub.com/JoanGTSQ/api v1.0.3/go.mod h1:9+Vx3vrZiF05NXez8spQBs/Fvyc2H8y9DO2jg3Hehek=\r\ngithub.com/PuerkitoBio/goquery v1.5.1/go.mod h1:GsLWisAFVj4WgDibEWF4pvYnkVQBpKBKeU+7zCJoLcc=\r\ngithub.com/andybalholm/cascadia v1.1.0/go.mod h1:GsXiBklL0woXo1j/WYWtSYYC4ouU9PqHO0sqidkEA4Y=\r\ngithub.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=\r\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\r\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\r\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\r\ngithub.com/denisenkom/go-mssqldb v0.0.0-20191124224453-732737034ffd h1:83Wprp6ROGeiHFAP8WJdI2RoxALQYgdllERc3N5N2DM=\r\ngithub.com/denisenkom/go-mssqldb v0.0.0-20191124224453-732737034ffd/go.mod h1:xbL0rPBG9cCiLr28tMa8zpbdarY27NDyej4t/EjAShU=\r\ngithub.com/erikstmartin/go-testdb v0.0.0-20160219214506-8d10e4a1bae5 h1:Yzb9+7DPaBjB8zlTR87/ElzFsnQfuHnVUVqpZZIcV5Y=\r\ngithub.com/erikstmartin/go-testdb v0.0.0-20160219214506-8d10e4a1bae5/go.mod h1:a2zkGnVExMxdzMo3M0Hi/3sEU+cWnZpSni0O6/Yb/P0=\r\ngithub.com/fatih/color v1.13.0 h1:8LOYc1KYPPmyKMuN8QV2DNRWNbLo6LZ0iLs8+mlH53w=\r\ngithub.com/fatih/color v1.13.0/go.mod h1:kLAiJbzzSOZDVNGyDpeOxJ47H46qBXwg5ILebYFFOfk=\r\ngithub.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=\r\ngithub.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=\r\ngithub.com/gin-gonic/gin v1.8.1 h1:4+fr/el88TOO3ewCmQr8cx/CtZ/umlIRIs5M4NTNjf8=\r\ngithub.com/gin-gonic/gin v1.8.1/go.mod h1:ji8BvRH1azfM+SYow9zQ6SZMvR8qOMZHmsCuWR9tTTk=\r\ngithub.com/go-playground/assert/v2 v2.0.1 h1:MsBgLAaY856+nPRTKrp3/OZK38U/wa0CcBYNjji3q3A=\r\ngithub.com/go-playground/assert/v2 v2.0.1/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=\r\ngithub.com/go-playground/locales v0.14.0 h1:u50s323jtVGugKlcYeyzC0etD1HifMjqmJqb8WugfUU=\r\ngithub.com/go-playground/locales v0.14.0/go.mod h1:sawfccIbzZTqEDETgFXqTho0QybSa7l++s0DH+LDiLs=\r\ngithub.com/go-playground/universal-translator v0.18.0 h1:82dyy6p4OuJq4/CByFNOn/jYrnRPArHwAcmLoJZxyho=\r\ngithub.com/go-playground/universal-translator v0.18.0/go.mod h1:UvRDBj+xPUEGrFYl+lu/H90nyDXpg0fqeB/AQUGNTVA=\r\ngithub.com/go-playground/validator/v10 v10.10.0 h1:I7mrTYv78z8k8VXa/qJlOlEXn/nBh+BF8dHX5nt/dr0=\r\ngithub.com/go-playground/validator/v10 v10.10.0/go.mod h1:74x4gJWsvQexRdW8Pn3dXSGrTK4nAUsbPlLADvpJkos=\r\ngithub.com/go-sql-driver/mysql v1.5.0 h1:ozyZYNQW3x3HtqT1jira07DN2PArx2v7/mN66gGcHOs=\r\ngithub.com/go-sql-driver/mysql v1.5.0/go.mod h1:DCzpHaOWr8IXmIStZouvnhqoel9Qv2LBy8hT2VhHyBg=\r\ngithub.com/goccy/go-json v0.9.7 h1:IcB+Aqpx/iMHu5Yooh7jEzJk1JZ7Pjtmys2ukPr7EeM=\r\ngithub.com/goccy/go-json v0.9.7/go.mod h1:6MelG93GURQebXPDq3khkgXZkazVtN9CRI+MGFi0w8I=\r\ngithub.com/golang-jwt/jwt/v4 v4.4.2 h1:rcc4lwaZgFMCZ5jxF9ABolDcIHdBytAFgqFPbSJQAYs=\r\ngithub.com/golang-jwt/jwt/v4 v4.4.2/go.mod h1:m21LjoU+eqJr34lmDMbreY2eSTRJ1cv77w39/MY0Ch0=\r\ngithub.com/golang-sql/civil v0.0.0-20190719163853-cb61b32ac6fe h1:lXe2qZdvpiX5WZkZR4hgp4KJVfY3nMkvmwbVkpv1rVY=\r\ngithub.com/golang-sql/civil v0.0.0-20190719163853-cb61b32ac6fe/go.mod h1:8vg3r2VgvsThLBIFL93Qb5yWzgyZWhEmBwUJWevAkK0=\r\ngithub.com/golang/protobuf v1.5.0/go.mod h1:FsONVRAS9T7sI+LIUmWTfcYkHO4aIWwzhcaSAoJOfIk=\r\ngithub.com/google/go-cmp v0.5.5 h1:Khx7svrCpmxxtHBq5j2mp/xVjsi8hQMfNLvJFAlrGgU=\r\ngithub.com/google/go-cmp v0.5.5/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=\r\ngithub.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=\r\ngithub.com/google/uuid v1.3.0 h1:t6JiXgmwXMjEs8VusXIJk2BXHsn+wx8BZdTaoZ5fu7I=\r\ngithub.com/google/uuid v1.3.0/go.mod h1:TIyPZe4MgqvfeYDBFedMoGGpEw/LqOeaOT+nhxU+yHo=\r\ngithub.com/gorilla/websocket v1.5.0 h1:PPwGk2jz7EePpoHN/+ClbZu8SPxiqlu12wZP/3sWmnc=\r\ngithub.com/gorilla/websocket v1.5.0/go.mod h1:YR8l580nyteQvAITg2hZ9XVh4b55+EU/adAjf1fMHhE=\r\ngithub.com/jinzhu/gorm v1.9.16 h1:+IyIjPEABKRpsu/F8OvDPy9fyQlgsg2luMV2ZIH5i5o=\r\ngithub.com/jinzhu/gorm v1.9.16/go.mod h1:G3LB3wezTOWM2ITLzPxEXgSkOXAntiLHS7UdBefADcs=\r\ngithub.com/jinzhu/inflection v1.0.0 h1:K317FqzuhWc8YvSVlFMCCUb36O/S9MCKRDI7QkRKD/E=\r\ngithub.com/jinzhu/inflection v1.0.0/go.mod h1:h+uFLlag+Qp1Va5pdKtLDYj+kHp5pxUVkryuEj+Srlc=\r\ngithub.com/jinzhu/now v1.0.1 h1:HjfetcXq097iXP0uoPCdnM4Efp5/9MsM0/M+XOTeR3M=\r\ngithub.com/jinzhu/now v1.0.1/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=\r\ngithub.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=\r\ngithub.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=\r\ngithub.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=\r\ngithub.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=\r\ngithub.com/kr/pretty v0.3.0 h1:WgNl7dwNpEZ6jJ9k1snq4pZsg7DOEN8hP9Xw0Tsjwk0=\r\ngithub.com/kr/pretty v0.3.0/go.mod h1:640gp4NfQd8pI5XOwp5fnNeVWj67G7CFk/SaSQn7NBk=\r\ngithub.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=\r\ngithub.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=\r\ngithub.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=\r\ngithub.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=\r\ngithub.com/leodido/go-urn v1.2.1 h1:BqpAaACuzVSgi/VLzGZIobT2z4v53pjosyNd9Yv6n/w=\r\ngithub.com/leodido/go-urn v1.2.1/go.mod h1:zt4jvISO2HfUBqxjfIshjdMTYS56ZS/qv49ictyFfxY=\r\ngithub.com/lib/pq v1.1.1 h1:sJZmqHoEaY7f+NPP8pgLB/WxulyR3fewgCM2qaSlBb4=\r\ngithub.com/lib/pq v1.1.1/go.mod h1:5WUZQaWbwv1U+lTReE5YruASi9Al49XbQIvNi/34Woo=\r\ngithub.com/mattn/go-colorable v0.1.9/go.mod h1:u6P/XSegPjTcexA+o6vUJrdnUu04hMope9wVRipJSqc=\r\ngithub.com/mattn/go-colorable v0.1.12 h1:jF+Du6AlPIjs2BiUiQlKOX0rt3SujHxPnksPKZbaA40=\r\ngithub.com/mattn/go-colorable v0.1.12/go.mod h1:u5H1YNBxpqRaxsYJYSkiCWKzEfiAb1Gb520KVy5xxl4=\r\ngithub.com/mattn/go-isatty v0.0.12/go.mod h1:cbi8OIDigv2wuxKPP5vlRcQ1OAZbq2CE4Kysco4FUpU=\r\ngithub.com/mattn/go-isatty v0.0.14 h1:yVuAays6BHfxijgZPzw+3Zlu5yQgKGP2/hcQbHb7S9Y=\r\ngithub.com/mattn/go-isatty v0.0.14/go.mod h1:7GGIvUiUoEMVVmxf/4nioHXj79iQHKdU27kJ6hsGG94=\r\ngithub.com/mattn/go-sqlite3 v1.14.0 h1:mLyGNKR8+Vv9CAU7PphKa2hkEqxxhn8i32J6FPj1/QA=\r\ngithub.com/mattn/go-sqlite3 v1.14.0/go.mod h1:JIl7NbARA7phWnGvh0LKTyg7S9BA+6gx71ShQilpsus=\r\ngithub.com/mitchellh/mapstructure v1.5.0 h1:jeMsZIYE/09sWLaz43PL7Gy6RuMjD2eJVyuac5Z2hdY=\r\ngithub.com/mitchellh/mapstructure v1.5.0/go.mod h1:bFUtVrKA4DC2yAKiSyO/QUcy7e+RRV2QTWOzhPopBRo=\r\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421 h1:ZqeYNhU3OHLH3mGKHDcjJRFFRrJa6eAM5H+CtDdOsPc=\r\ngithub.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=\r\ngithub.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=\r\ngithub.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=\r\ngithub.com/pelletier/go-toml/v2 v2.0.1 h1:8e3L2cCQzLFi2CR4g7vGFuFxX7Jl1kKX8gW+iV0GUKU=\r\ngithub.com/pelletier/go-toml/v2 v2.0.1/go.mod h1:r9LEWfGN8R5k0VXJ+0BkIe7MYkRdwZOjgMj2KwnJFUo=\r\ngithub.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=\r\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\r\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\r\ngithub.com/rogpeppe/go-internal v1.6.1/go.mod h1:xXDCJY+GAPziupqXw64V24skbSoqbTEfhy4qGm1nDQc=\r\ngithub.com/rogpeppe/go-internal v1.8.0 h1:FCbCCtXNOY3UtUuHUYaghJg4y7Fd14rXifAYUAtL9R8=\r\ngithub.com/rogpeppe/go-internal v1.8.0/go.mod h1:WmiCO8CzOY8rg0OYDC4/i/2WRWAB6poM+XZ2dLUbcbE=\r\ngithub.com/satori/go.uuid v1.2.0 h1:0uYX9dsZ2yD7q2RtLRtPSdGDWzjeM3TbMJP9utgA0ww=\r\ngithub.com/satori/go.uuid v1.2.0/go.mod h1:dA0hQrYB0VpLJoorglMZABFdXlWrHn1NEOzdhQKdks0=\r\ngithub.com/shopspring/decimal v1.3.1 h1:2Usl1nmF/WZucqkFZhnfFYxxxu8LG21F6nPQBE5gKV8=\r\ngithub.com/shopspring/decimal v1.3.1/go.mod h1:DKyhrW/HYNuLGql+MJL6WCR6knT2jwCFRcu2hWCYk4o=\r\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\r\ngithub.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=\r\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\r\ngithub.com/stretchr/testify v1.6.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\r\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\r\ngithub.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\r\ngithub.com/stretchr/testify v1.8.0 h1:pSgiaMZlXftHpm5L7V1+rVB+AZJydKsMxsQBIJw4PKk=\r\ngithub.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=\r\ngithub.com/ugorji/go v1.2.7 h1:qYhyWUUd6WbiM+C6JZAUkIJt/1WrjzNHY9+KCIjVqTo=\r\ngithub.com/ugorji/go v1.2.7/go.mod h1:nF9osbDWLy6bDVv/Rtoh6QgnvNDpmCalQV5urGCCS6M=\r\ngithub.com/ugorji/go/codec v1.2.7 h1:YPXUKf7fYbp/y8xloBqZOw2qaVggbfwMlI8WM3wZUJ0=\r\ngithub.com/ugorji/go/codec v1.2.7/go.mod h1:WGN1fab3R1fzQlVQTkfxVtIBhWDRqOviHU95kRgeqEY=\r\ngolang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\r\ngolang.org/x/crypto v0.0.0-20190325154230-a5d413f7728c/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=\r\ngolang.org/x/crypto v0.0.0-20191205180655-e7c4368fe9dd/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=\r\ngolang.org/x/crypto v0.0.0-20210711020723-a769d52b0f97/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=\r\ngolang.org/x/crypto v0.0.0-20220214200702-86341886e292 h1:f+lwQ+GtmgoY+A2YaQxlSOnDjXcQ7ZRLWOHbC6HtRqE=\r\ngolang.org/x/crypto v0.0.0-20220214200702-86341886e292/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=\r\ngolang.org/x/net v0.0.0-20180218175443-cbe0f9307d01/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=\r\ngolang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=\r\ngolang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=\r\ngolang.org/x/net v0.0.0-20200324143707-d3edc9973b7e/go.mod h1:qpuaurCH72eLCgpAm/N6yyVIVM9cpaDIP3A8BGJEC5A=\r\ngolang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=\r\ngolang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=\r\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b h1:PxfKdU9lEEDYjdIzOtC4qFWgkU2rGHdKlKowJSMN9h0=\r\ngolang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=\r\ngolang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=\r\ngolang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\r\ngolang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\r\ngolang.org/x/sys v0.0.0-20200223170610-d5e6a3e2c0ae/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\r\ngolang.org/x/sys v0.0.0-20200323222414-85ca7c5b95cd/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\r\ngolang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\r\ngolang.org/x/sys v0.0.0-20210423082822-04245dca01da/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=\r\ngolang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\r\ngolang.org/x/sys v0.0.0-20210630005230-0f9fa26af87c/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\r\ngolang.org/x/sys v0.0.0-20210806184541-e5e7981a1069/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\r\ngolang.org/x/sys v0.0.0-20210927094055-39ccf1dd6fa6/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\r\ngolang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\r\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f h1:v4INt8xihDGvnrfjMDVXGxw9wrfxYyCjk0KbXjhR55s=\r\ngolang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\r\ngolang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=\r\ngolang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=\r\ngolang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\r\ngolang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\r\ngolang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=\r\ngolang.org/x/text v0.3.7 h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=\r\ngolang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=\r\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=\r\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543 h1:E7g+9GITq07hpfrRu66IVDexMakfv52eLZ2CXBWiKr4=\r\ngolang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=\r\ngoogle.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=\r\ngoogle.golang.org/protobuf v1.28.0 h1:w43yiav+6bVFTBQFZX0r7ipe9JQ1QsbMgHwbBziscLw=\r\ngoogle.golang.org/protobuf v1.28.0/go.mod h1:HV8QOd/L58Z+nl8r43ehVNZIU/HEI6OcFqwMG9pJV4I=\r\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\r\ngopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\r\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=\r\ngopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=\r\ngopkg.in/errgo.v2 v2.1.0/go.mod h1:hNsd1EY+bozCKY1Ytp96fpM3vjJbqLJn88ws8XvfDNI=\r\ngopkg.in/yaml.v2 v2.4.0 h1:D8xgwECY7CYvx+Y2n4sBz93Jn9JRvxdiyyo8CTfuKaY=\r\ngopkg.in/yaml.v2 v2.4.0/go.mod h1:RDklbk79AGWmwhnvt/jBztapEOGDOx6ZbXqjP6csGnQ=\r\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\r\ngopkg.in/yaml.v3 v3.0.0-20210107192922-496545a6307b/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\r\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\r\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/go.sum b/go.sum
--- a/go.sum	(revision 945af2d159517c5934e4fc21483ba81ea1f0cab8)
+++ b/go.sum	(date 1672567875176)
@@ -98,12 +98,16 @@
 github.com/ugorji/go v1.2.7/go.mod h1:nF9osbDWLy6bDVv/Rtoh6QgnvNDpmCalQV5urGCCS6M=
 github.com/ugorji/go/codec v1.2.7 h1:YPXUKf7fYbp/y8xloBqZOw2qaVggbfwMlI8WM3wZUJ0=
 github.com/ugorji/go/codec v1.2.7/go.mod h1:WGN1fab3R1fzQlVQTkfxVtIBhWDRqOviHU95kRgeqEY=
+github.com/yuin/goldmark v1.4.13 h1:fVcFKWvrslecOb/tg+Cc05dkeYx540o0FuFt3nUVDoE=
+github.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=
 golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20190325154230-a5d413f7728c/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
 golang.org/x/crypto v0.0.0-20191205180655-e7c4368fe9dd/go.mod h1:LzIPMQfyMNhhGPhUkYOs5KpL4U8rLKemX1yGLhDgUto=
 golang.org/x/crypto v0.0.0-20210711020723-a769d52b0f97/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
 golang.org/x/crypto v0.0.0-20220214200702-86341886e292 h1:f+lwQ+GtmgoY+A2YaQxlSOnDjXcQ7ZRLWOHbC6HtRqE=
 golang.org/x/crypto v0.0.0-20220214200702-86341886e292/go.mod h1:IxCIyHEi3zRg3s0A5j5BB6A9Jmi73HwBIUl50j+osU4=
+golang.org/x/mod v0.7.0 h1:LapD9S96VoQRhi/GrNTqeBJFrUjs5UHCAtTlgwA5oZA=
+golang.org/x/mod v0.7.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=
 golang.org/x/net v0.0.0-20180218175443-cbe0f9307d01/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20200202094626-16171245cfb2/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
@@ -112,6 +116,8 @@
 golang.org/x/net v0.0.0-20211112202133-69e39bad7dc2/go.mod h1:9nx3DQGgdP8bBQD5qxJ1jj9UTztislL4KSBs9R2vV5Y=
 golang.org/x/net v0.0.0-20220722155237-a158d28d115b h1:PxfKdU9lEEDYjdIzOtC4qFWgkU2rGHdKlKowJSMN9h0=
 golang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
+golang.org/x/net v0.3.0 h1:VWL6FNY2bEEmsGVKabSlHu5Irp34xmMRoqb/9lF9lxk=
+golang.org/x/net v0.3.0/go.mod h1:MBQ8lrhLObU/6UmLb4fmbmk5OcyYmqtbGd/9yIeKjEE=
 golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
 golang.org/x/sys v0.0.0-20190412213103-97732733099d/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
 golang.org/x/sys v0.0.0-20200116001909-b77594299b42/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
@@ -126,6 +132,8 @@
 golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f h1:v4INt8xihDGvnrfjMDVXGxw9wrfxYyCjk0KbXjhR55s=
 golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
+golang.org/x/sys v0.3.0 h1:w8ZOecv6NaNa/zC8944JTU3vz4u6Lagfk4RPQxv92NQ=
+golang.org/x/sys v0.3.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
 golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
 golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
 golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
@@ -133,7 +141,11 @@
 golang.org/x/text v0.3.6/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
 golang.org/x/text v0.3.7 h1:olpwvP2KacW1ZWvsR7uQhoyTYvKAupfQrRGBFM352Gk=
 golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
+golang.org/x/text v0.5.0 h1:OLmvp0KP+FVG99Ct/qFiL/Fhk4zp4QQnZ7b2U+5piUM=
+golang.org/x/text v0.5.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=
 golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
+golang.org/x/tools v0.4.0 h1:7mTAgkunk3fr4GAloyyCasadO6h9zSsQZbwvcaIciV4=
+golang.org/x/tools v0.4.0/go.mod h1:UE5sM2OK9E/d67R0ANs2xJizIymRP5gJU295PvKXxjQ=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543 h1:E7g+9GITq07hpfrRu66IVDexMakfv52eLZ2CXBWiKr4=
 golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
 google.golang.org/protobuf v1.26.0-rc.1/go.mod h1:jlhhOSvTdKEhbULTjvd4ARK9grFBp09yW+WbY/TyQbw=
